on:
  workflow_call:
    inputs:
      mainProjectPath:
        required: true
        type: string
      testProjectPath:
        required: true
        type: string
      publish:
        required: true
        type: boolean
    secrets:
      nuget:
        required: true

jobs:
  build-test-publish:
    runs-on: windows-2022
    env:
      DOTNET_NOLOGO: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true
    steps:
      - name: checkout source
        uses: actions/checkout@v2
      - name: setup .net 3.1.x
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "3.1.x"
      - name: setup .net 5.x
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "5.x"
      - name: setup .net 6.x
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "6.x"
      - name: restore main project
        run: dotnet restore "${{ inputs.mainProjectPath }}"
      - name: build main project
        run: dotnet build "${{ inputs.mainProjectPath }}" --configuration release --no-restore
      - name: restore test project
        run: dotnet restore "${{ inputs.testProjectPath }}"
      - name: build test project
        run: dotnet build "${{ inputs.testProjectPath }}" --configuration release --no-restore
      - name: run tests
        run: dotnet test "${{ inputs.testProjectPath }}" --configuration release --no-restore --no-build
      - name: publish to nuget
        if: ${{ inputs.publish == 'true' }}
        run: |
          dotnet pack "${{ inputs.mainProjectPath }}" --configuration release --include-symbols --no-restore --no-build --output .artifacts
          get-childitem ./.artifacts/*.nupkg | foreach-object { dotnet nuget push $_ --api-key ${{ secrets.nuget }} --source https://api.nuget.org/v3/index.json }
      - name: tag source
        if: ${{ inputs.publish == 'true' }}
        continue-on-error: true
        run: |
          $app = [System.IO.Path]::GetFilenameWithoutExtension("${{ inputs.mainProjectPath }}")
          $version = select-string -path "${{ inputs.mainProjectPath }}" -pattern "<version>(?<version>.*)</version" | % { $_.Matches[0].Groups['version'] }
          if (!$version) {
            write-error "version not found"
          }
          $tag = $app + "-" + $version
          git config user.email "actions@github.com"
          git config user.name "GitHub Actions"
          git tag -a $tag -m $tag
          git push origin --tags
